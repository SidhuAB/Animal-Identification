import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
from pandas.tools.plotting import scatter_matrix
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.learning_curve import learning_curve
from sklearn.datasets import load_digits
from sklearn.externals import joblib
from sklearn import tree

zoo = pd.read_csv("data/zoo.csv")
cls = pd.read_csv("data/class.csv")

zoo.head()
cls.head(cls.shape[0])
zoo.describe()
zoo.info()
cls.info()

corr = zoo.corr()
plt.figure(figsize=(14,14))
sns.heatmap(corr, square=True, annot=True, fmt='.2f', linewidths=0.1, linecolor='white')
plt.title('Correlation of ZOO Features')

dropped_corr = corr[corr != 1][abs(corr) > 0.6].dropna(how='all', axis=1).dropna(how='all', axis=0)
new_zoo = zoo[dropped_corr.index]
new_corr = new_zoo.corr()
plt.figure(figsize=(14,14))
sns.heatmap(new_corr, square=True, annot=True, fmt='.2f', linewidths=0.1, linecolor='white')
plt.title('New Correlation of ZOO Features')

sns.swarmplot(new_zoo['hair'], new_zoo['class_type'])
sns.swarmplot(new_zoo['feathers'], new_zoo['class_type'])
sns.swarmplot(new_zoo['airborne'], new_zoo['class_type'])
sns.swarmplot(new_zoo['aquatic'], new_zoo['class_type'])
sns.swarmplot(new_zoo['toothed'], new_zoo['class_type'])
sns.swarmplot(new_zoo['breathes'], new_zoo['class_type'])
sns.swarmplot(new_zoo['fins'], new_zoo['class_type'])
sns.swarmplot(new_zoo['legs'], new_zoo['class_type'])
sns.swarmplot(new_zoo['tail'], new_zoo['class_type'])

new_zoo = new_zoo.drop(columns=['airborne', 'aquatic'])
new_zoo.info()
zoo_X = new_zoo.iloc[:,1:-1]
zoo_y = new_zoo.iloc[:,-1]
X_train, X_test, y_train, y_test = train_test_split(zoo_X, zoo_y, test_size=0.2, random_state=8)
linear = LinearRegression(fit_intercept=True)
score_linear = cross_val_score(linear, zoo_X, zoo_y, cv=4)
print(score_linear)
print(score_linear.mean())
svc = SVC(kernel='linear')
score_svc = cross_val_score(svc, zoo_X, zoo_y, cv=4, scoring='accuracy')
print(score_svc)
print(score_svc.mean())
dt = tree.DecisionTreeClassifier()
score_dt = cross_val_score(dt, zoo_X, zoo_y, cv=4, scoring='accuracy')
print(score_dt)
print(score_dt.mean())
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
c = sns.cubehelix_palette(light=1, as_cmap=True)
svc = SVC(kernel='linear')
fitted_svc = svc.fit(X_train, y_train)
predict_svc = fitted_svc.predict(X_test)
print('SVC Accuracy = ' + str(accuracy_score(y_test, predict_svc)))
cnf_matrix_svc = confusion_matrix(y_test, predict_svc)
sns.heatmap(cnf_matrix_svc, square=True, annot=True, cmap=cmap)
plt.title('Confusion Matrix of SVM')
print('Classification Report of SVM')
print(classification_report(y_test, predict_svc))

dt = tree.DecisionTreeClassifier()
fitted_dt = dt.fit(X_train, y_train)
predict_dt = fitted_dt.predict(X_test)
print('DT Accuracy = ' + str(accuracy_score(y_test, predict_dt)))
cnf_matrix_dt = confusion_matrix(y_test, predict_dt)
sns.heatmap(cnf_matrix_dt, square=True, annot=True, cmap=cmap)
plt.title('Confusion Matrix of Decision Tree')
print('Classification Report of Decision Tree')
print(classification_report(y_test, predict_dt))
